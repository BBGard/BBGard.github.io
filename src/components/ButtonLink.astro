---
/**
 * @name ButtonLink
 * @desc A custom button with a link and optional image/icon
 * @param {string} icon - The URL of the icon to display
 * @param {string} btnText - The text to display on the button
 * @param {string} btnLink - The URL to link to
 * @param {string} btnTarget - The target of the link
 * @param {boolean} reverse - Whether to reverse the order of the icon and text
 * @param {boolean} invertHover - Whether to invert the icon on hover
 * @param {boolean} invert - Whether to invert the icon noramlly
 * @param {string} size - The size of the button
 * @param {string} customClass - Any custom classes to add to the button
 */

const {
  icon = "",
  btnText = "",
  btnLink = "",
  btnTarget = "_self",
  reverse = "false",
  invertHover = "false",
  invert = "false",
  size = "normal",
  customClass = "",
  animation = "slide-in-bottom",
} = Astro.props;
---

<a
  href={btnLink}
  target={btnTarget}
  class={icon
    ? `btn btn-${size} btn-icon ${animation} ${customClass}`
    : `btn btn-${size} ${animation} ${customClass}`}
>
  {
    reverse ? (
      <>
        {icon ? (
          <div
            class={
              invertHover === true
                ? `mr-2 ${animation} icon invert-hover`
                : `mr-2 ${animation}`
            }
          >
            <img
              class={invert === true ? "invert" : ""}
              src={icon}
              alt={btnText}
            />
          </div>
        ) : null}
        <div class={icon ? `${animation} link` : `${animation}`}>
          <span>{btnText}</span>
        </div>
      </>
    ) : (
      <>
        <div class={icon ? `${animation} link` : `${animation}`}>
          <span>{btnText}</span>
        </div>
        {icon ? (
          <div
            class={
              invertHover === true
                ? `ml-2 ${animation} icon invert-hover`
                : `ml-2 ${animation}`
            }
          >
            <img
              class={invert === true ? "invert" : ""}
              src={icon}
              alt={btnText}
            />
          </div>
        ) : null}
      </>
    )
  }
</a>

<style>
  .btn-large {
    padding: 1rem;
    font-size: 1.5rem;
  }

  .btn-small {
    padding: 0.5rem;
    font-size: 0.75rem;
  }

  .btn-medium {
    padding: 0.75rem;
    font-size: 1rem;
  }

  .btn-full {
    width: 100%;
    margin-top: 1rem;
  }

  a {
    /* color: var(--secondary); */
    text-decoration: none;
  }

  a:hover {
    text-decoration: underline;
  }

  img {
    width: 1.5rem;
    height: 1.5rem;
    transition: none;
  }

  .btn-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--accent-gold);
  }

  .btn-icon:hover {
    background-color: var(--accent-gold-dark);
  }

  .btn-icon:hover .invert-hover > img {
    filter: invert(1);
  }

  .invert {
    filter: invert(1);
  }

  .btn-icon:hover .invert-hover > img.invert {
    filter: invert(0);
  }

  .mr-2 {
    margin-right: 0.5rem;
    display: flex;
    align-items: center;
  }

  .ml-2 {
    margin-left: 0.5rem;
    display: flex;
    align-items: center;
  }

  @media screen and (max-width: 1000px) {
    .link {
      display: none;
    }

    .btn-full .link {
      display: block;
    }

    .btn-icon {
      padding: 0.5rem;
    }

    .icon {
      margin: 0;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .mr-2 {
      margin-right: 0;
    }

    .ml-2 {
      margin-left: 0;
    }

    .btn-full .mr-2 {
      margin-right: 0.5rem;
    }

    .btn-full .ml-2 {
      margin-left: 0.5rem;
    }
  }
</style>
